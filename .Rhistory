browseURL("http://cran.r-project.org/web/views/")  # Opens CRAN Task Views in browser
browseURL("http://crantastic.org/")
library()  # Brings up editor list of installed packages
install.packages("ggplot2")  # Downloads package from CRAN and installs in R
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:ggplot2", unload=TRUE)
require("ggplot2")  # Preferred for loading in functions; maybe better?
library(help = "ggplot2")  # Brings up documentation in editor window
vignette(package = "grid")  # Brings up list of vignettes (examples) in editor window
browseVignettes()  # HTML for all vignettes for currently installed packages
browseVignettes(package = "grid")  # Open web page with hyperlinks for vignette PDFs etc.
update.packages()  # Checks for updates; do periodically
data(airmiles)  # Listed as "ts" for "time-series"
yes
update(yes)
data()
?airmiles
data(airmiles)  # Listed as "ts" for "time-series"
airmiles
str(airmiles)
data(anscombe)  # Appears under "Data" in the Workspace
str(anscombe)
View(anscombe)
View(anscombe)
anscombe
rm(list = ls())  # Clean up
# R Statistics Essential Training
L
x1 <- 0:10  # Assigns number 0 through 10 to x1
x2 <- 10:0  # Assigns number 10 through 0 to x2
x2
x3 <- seq(10)  # Counts from 1 to 10
x3
?seq
x4 <- seq(30, 0, by = -3)  # Counts down by 3
x4
x5 <- c(5, 4, 1, 6, 7, 2, 2, 3, 2, 8)  # Concatenate
x5
?c
?scan
x6 <- scan()  # After running this command, go to console
x6
ls()  # List objects (same as Workspace viewer)
rm(list = ls())  # Clean up
browseURL("http://cran.r-project.org/doc/manuals/R-data.html#Reading-Excel-spreadsheets")
trends.txt <- read.table("~/Desktop/R/GoogleTrends.txt", header = TRUE)
?read.table
trends.txt <- read.table("~/Desktop/R/GoogleTrends.txt", header = TRUE, sep = "\t")
View(trends.txt)
trends.csv <- read.csv("~/Desktop/R/GoogleTrends.csv", header = TRUE)
View(trends.csv)
rm(list = ls())  # Clean up
# Load data
?UCBAdmissions
str(UCBAdmissions)
UCBAdmissions
admit.fail <- (UCBAdmissions$Admit)  # Doesn't work
barplot(UCBAdmissions$Admit)  # Doesn't work
plot(UCBAdmissions)  # DOES work but not what we wanted now
margin.table(UCBAdmissions, 1)  # Admit
margin.table(UCBAdmissions, 2)  # Gender
margin.table(UCBAdmissions, 3)  # Dept
margin.table(UCBAdmissions)     # Total
?margin.table
admit.dept <- margin.table(UCBAdmissions, 3)  # Dept
barplot(admit.dept)
admit.dept  # Show frequencies
prop.table(admit.dept)  # Show as proportions
round(prop.table(admit.dept), 2)  # Show as proportions w/2 digits
round(prop.table(admit.dept), 2) * 100  # Give percentages w/o decimal places
?prop.table
admit1 <- as.data.frame.table(UCBAdmissions)  # Coerces to data frame
View(admit1)
admit2 <- lapply(admit1, function(x)rep(x, admit1$Freq))  # Repeats each row by Freq
admit2 <- lapply(admit1, function(x)rep(x, admit1$Freq))  # Repeats each row by Freq
admit2 <- lapply(admit1, function(x)rep(x, admit1$Freq))  # Repeats each row by Freq
admit3 <- as.data.frame(admit2)  # Converts from list back to data frame
View(admit3)
admit4 <- admit3[, -4]  # Removes fifth column with frequencies
View(admit4)
admit.rows[1:10, ]  # View first ten rows of data (of 4526)
str(admit.rows)
str(admit.rows)
admit.rows[1:10, ]  # View first ten rows of data (of 4526)
admit.rows <- as.data.frame(lapply(as.data.frame.table(UCBAdmissions), function(x)rep(x, as.data.frame.table(UCBAdmissions)$Freq)))[, -4]
admit.rows[1:10, ]  # View first ten rows of data (of 4526)
rm(list = ls())  # Clean up
rm(list = ls())  # Clean up
rm(list = ls())  # Clean up
?install.packages
install.packages("KernSmooth")
?KernSmooth
??KernSmooth
library(KernSmooth)
print("Hello World")
print("Hello World!")
x<- 1:4
y<- 2
x+y
y <-2:3
x+y
x<- c(17,14,4,5,13,12,10)
x[x>4] <-10
x
> x<- c(17,14,4,5,13,12,10)
x<- c(17,14,4,5,13,12,10)
x[x>10]<-4
x
x<- c(17,14,4,5,13,12,10)
x[x>10]==4
x[x>=11]<-4
x
x <- 1:4
y <- 2:3
x + y
6 <7
9>=10
7 == 9
-6 > -7
!(0>=-1)
(TRUE != FALSE) == !(6 ==7)
6 != 10 && FALSE && 1 >=2
TRUE && FALSE || 9 >= 4 && 3 < 6
!(8 >4) || 5 == 5.0 && 7.8 >= 7.79
6>= -9 && !(6 > 7) && !(!TRUE)
FALSE || TRUE && 6 != 4 || 9 > 4
!isTrue(4 <3)
isTRUE(4<3)
!isTRUE(4<3)
!identical(7,7)
identical(5>4, 3 <3.1)
xor(!!TRUE, !!FALSE)
xor(identical('xor', 'xor'), 7 == 7.0)
xor(!!TRUE(TRUE), 6 > -1)
xor(!isTRUE(TRUE), 6 > -1)
ints <- sample(10)
which(ints <= 2)
ints <= 2
which(ints < 2)
library('swirl')
install.packages("swirl")
packageVersion("swirl")
library("swirl")
install_from_swirl("R Programing")
install_from_swirl("R Programming")
getwd
getwd()
systime()
Sys.time()
swirl()
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x) {
x
}
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
my_vector(c(4,5,10))
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate <- function(func, dat){
func(dat)
evaluate
evaluate(sd, c(1.4, 3.6, 7.9, 8.8)
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){c(8,4,0)}, 1)
evaluate(function(x){[1]}, c(8,4,0))
info()
nxt()
evaluate([x]{x=1}, c(8,4,0))
evaluate([x]{x=1}, c(8,4,0))
nxt()
evaluate(function(x){x[length(x)]}, dat=c(8,4,0))
evaluate(function(x){[length(x)]}, dat=c(8,4,0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("Hello", "World", "Cody")
submit()
mad_libs(place = "Portland", adjective = "furry", noun = "Cody" )
submit()
"I" %p% "love" %p% "R!"
}
}
library("swirl")
swirl()
source('~/Untitled.R')
0
Sys.Date()
mean(c(2,4,5))
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
setwd("~/test-datascience")
setwd("~/test-datascience")
setwd("~/ProgrammingAssignment2")
}
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
my matrix <- makeCacheMatrix(matrix(1:4, 2,2))
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
casheSolve(my_matrix)
}
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
View(cacheSolve)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
casheSolve(my_matrix)
casheSolve(my_matrix)
source('~/ProgrammingAssignment2/cachematrix.R')
casheSolve(my_matrix)
source('~/ProgrammingAssignment2/cachematrix.R')
}
View(cacheSolve)
View(get)
View(makeCacheMatrix)
View(setinv)
get <- function() x
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
